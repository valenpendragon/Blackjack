5/15/17

Added __init__ to Player class with full user initialization. 

5/16/17 6:40 am

Added a __del__ function to CardShoe class to announce that the current deck shoe had been removed from the game for the players.
Built __str__ function in Player class to print Player , bank, bets, regular hand and insurance. If the split_flag is True, it will print that data as well.

5/16/17 6:46am

Corrected an output error in __str__ for split hands.

5/16/17 7:20am  Pushed to origin

Added comments on methods __del__ and __len__ to Player class comment block.
Added method info to Player.__str__ () method.
Created Player.__del__() method.
Created Player.__len__() method to print out the len of the player's main hand.
Created Player.print_split() method to focus Player info output on just the split hand, bank, and bets.

5/16/17 7:25am  Pushed to origin

Created a GPL for LICENSE.md. Created a rudimentary 'alpha warning' README.md.

5/16/17 4:00pm Pushed to origin

Moved the descriptions of the round and game methods to the end of the comments list.
Moved the values dictionary to Player class. It is actually not being used at all in the CardShoe.
Created Player.add_card_to_hand() method.

5/17/17 7:15am

Created Player.add_card_to_split() method.

5/17/17 7:36am

Building Player.player_blackjack, Player.player_win, and Player.player_split_win.
Fixed some spelling errors in attribute comment block.
New methods still need testing.

5/17/17 1:40pm Pushed to origin

Tested and validated the Player.blackjack() Player.win, and Player.split_win methods.
Removed the word player_ from the Player win methods and comment block.
Removed player_ from the losses and ties names in the comment block.
In comment block, changed name of player_split to split_pair.

5/17/17 2:11 pm

Clarified the input and output comments for Player win methods.
Created and tested method Player.reg_loss and Player.split_loss.
Added mention of the meaning of True or False for loss methods in the main comment block for the Class.

5/17/17 3:07pm Pushed to origin

Clarified the comments in the Class comment block for the Player tie methods.
Created and tested the Player.tie and Player.split_tie methods.
Added Player.ins() method which handles the bets on Dealer blackjack. Updated comment block on this method as well.

5/17/17 5:10pm 

Cleaned up some typos in the comment block for Player.ins() method.
Created Player.end_round() method to clear bets and hands at the end of a round. (This method may not be needed.)
Created Player.update_bet() method for increasing bets.
Added comments for this method and two other similar ones that will be based on it.

5/19/17 10:30 pm

Additional testing of Player.update_bet.
Created Player.update_split_bet and performed basic testing.

5/22/17 11:59pm Pushed to origin

Created method Player_total_bets() and replaced the original code with this call in Player.update_bet and Player.update_split_bet.
Created method Player.update_ins() that applies the player's insurance bet.
Discovered an error confusing soft and hard scores. Fixed it with a scoring method, Player.score_hand(card_hand). This method works and will be incorporated into add_card methods.

5/23/17 10:30pm Pushed to origin

Fixed methods Player.add_card_to_hand() and Player.add_card_to_split() using score_hand to handle hard and soft scores (which had been reversed in the original code).

5/23/17 11:52pm Pushed to origin

Finished and tested methods Player.split_check() and Player.split_pair. Finshed and tested Player.double_down(). Player class completed and added to Blackjack.classes.py.

5/24/17 12:10am Pushed to origin

Updated comment section to reflect all of the changes made to the methods in the Player class.

5/24/17 1:30am

Created Dealer derived class and Dealer.__init__(), Dealer.__str__(), and Dealer.__del__() methods. 
No testing has been done yet.

5/25/17 9:50am Pushed to origin

Fixed problem with Dealer.__str__() showing the wrong visible_card. 
Added soft and hard visible scores, and updated special methods accordingly. 
Added Dealer.add_card_to_hand() method. 
No testing as yet. 
Tweaked comments in some Player class methods. 
Removed Blackjack.classes.py and broke classes up into individual classes.

5/25/17 11:10am Pushed to origin

After testing Dealer.__del__() method, it worked to allow it to be fully inherited instead of overridden.
Corrected Player.__del__() method to print player's name. It works with both classes.
Correcting syntax errors and output format problems in Dealer methods.
Put a missing return into Player._init__() method.

5/25/17 6:36pm

Fixed a typo in Player.double_down().
Migrated notes on the working methods to the main comment block for the class.
Created and tested Dealer.dealer_bust() method.
Removed data cleanup from the following Player methods (since end_round() methods will handle it): blackjack(), win(), split_win(), reg_loss(), split_loss(), tie(), split_tie(), and ins().
Added a comment to Player.split_win().
Added a description of Player.ins() to the class comment block.
Fixed comments for Player.end_round() to clarify that it will be needed at end of round after all.
Cleaned up the comment block for Dealer class.

5/25/17 7:10pm

Changed Dealer.dealer_bust() to Dealer.dealer_losses(), moving the totaling process to CasinoTable class.

5/26/17 12:26am Pushed to origin

Built and tested Dealer.dealer_wins() method.
Corrected typos in comment block for Dealer.dealer_losses().
Fixed some errors in comment block for Player and Dealer class.
Fixed errors in the comment block for Dealer.__init__() method.
Created and tested CardShoe.diagnostic_print() method, Player.diagnostic_print(), and Dealer.diagnostic_print()
Finished and tested all current methods for Dealer and Player classes.

5/26/17 12:34am

Cleared all testing code out of Blackjack jupyter notebook in preparation for building the new CasinoTable class.

5/26/17 2:03am

Started building the CasinoTable class. Basic attributes are created and table list (player list with dealer table[0]).
Started the class comment block for CasinoTable class, and built skeleton methods CasinoTable.__init__() and Casino_Table.diagnostic_print().
Corrected error in comment block for CardShoe class indicating that it was an abstract base class. That was an old comment.
Changed Dealer.__init__() to accept an integer starting bank, but will default to 100,000 if left out. Altered comment blocks accordingly.

5/27/17 3:00am Pushed to origin

Changed the name of the CasinoTable attribute table list to players and table_length to table_index to make their purpose clearer.
Clarified the comments in the comment block for CasinoTable.diagnostic_print().
Created the CasinoTable.rules() method that prints out the rules of this game and the actual casino blackjack rules that is it based on.

5/27/17 7:00am Pushed to origin

Created CasinoTable.__str__() method.
Fixed an printout error in CasinoTable.__init__().
Removed decimal points in the print outs for players in Player and Dealer classes. Modified it to ignore hands, bets and scores when hard scores are 0. Modified their return strings to print just the player's name.
Cleaned up the CardShoe.__str__() output string.
Created CasinoTable.deal_round() method and tested it.
Cleaned up an output string from Player.update_ins().
Restored clearing of bets when a Player blackjack win occurs to avoid having it impact later rounds (Player.blackjack() method).
Created CasinoTable.class.py to begin recording the changes in an importable class file.

5/28/17 5:32am 

Added CasinoTable.initial_bets() method and tested it.
Fully tested CasinoTable.deal_round() blackjack win code.
Fixed logical and cosmetic errors in Player.blackjack() method and Player.update_bet() and update_split_bet() methods.
Fixed bad wording in the rules() method.
Created and fully tested CasinoTable.pairs_check() for handling pairs and fixed any minor problems with Player.split_check and Player.split_pair.

5/31/17 8:00am Pushed to origin

Pushed all modifications made to Player and CasinoTable classes to the separate class libraries, with the exception of code used to test features in the methods (which will be cleared out of the jupyter notebook versions once a full version is down).

5/31/17 8:40am Pushed to origin

Created and tested CasinoTable.double_down() method.
Updated comment block for CasinoTable class with comments for methods initial_bets, pairs_check, and double_down.
Changes have been added to the separate CasinoTable class library.

5/31/17 2:36pm

Created the CasinoTable.hit_or_stand() method and the functionality for the regular hand. A placeholder exists for split hand functionality to be added next.
Added back in functionality to remove hands that lost during the player turn to Player.reg_loss and Player.split_loss to eliminate hands as a way to determine if the Dealer has to play its turn.
Update lib class files with changes to jupyter notebook versions.

6/1/17 5:45pm Pushed to origin

Corrected a problem in which  CasinoTable.pairs_check() method did not account for a player blackjack properly.
Corrected typos and errors in CasinoTable.hit_or_stand() method that was breaking the method.
Added functionality to add players losses to Dealer's benk in CasinoTable.hit_or_stand() for players who bust.
Rearranged print outs in CasinoTable.hit_or_stand() to make them more user friendly.
Added split hand functionality to CasionTable.hit_or_stand() method.
Fixed a printout problem in print(Player) method that was printing out empty hands.
Added a card call out for deals in CasinoTable.hit_or_stand() method.
Pushed corrections and additions to class libraries.

6/2/17 10:53am

Tested synchronization between development platforms after catastrophic failure forced a rebuild of one system in the group.

6/4/17 7:03am

Removed actual player deletion from CasinoTable.hit_or_stand due to problems reindexing the player list. It still warns the players that a player with a busted bank will be eliminated via CasinoTable.end_round() method.
Fixed a logic problem in the CasinoTable_hit_or_stand() method resulting from eliminating player removal in this method.
Created and tested CasinoTable.dealer_autowin() method.
Started work on CasinoTable.max_min_score() and CasinoTable.dealer_turn(), but they are far from complete.
No updates have been propagated to standalone class libraries.

6/4/17 12:00pm

Finished building CasinoTable.max_min_score().
Raised CasinoTable.table_size, the number of human players, to 3 in CasinoTable.__init_() for more complete testing.
Built out the hand scoring process for CasinoTable.dealer_turn() method, but it is still incomplete.

6/4/17 4:30pm Pushed to origin

Added insurance bet payouts to CasinoTable.dealer_turn() method.
Added several flags and win/loss aggregators to the same method.
Added an index number to hand_results list to make it easier to apply the wins/ties/losses at the end of the dealer's turn.
Renamed Dealer.dealer_wins() method Dealer.dealer_won() and Dealer.dealer_losses() Dealer.dealer_lost() to avoid conflicts with local aggregators in CasinoTable.dealer_turn().
Added overview comment on Dealer.dealer_won() to comment block for Dealer class.
Created place holder for CasinoTable.end_round().
Created and tested CasinoTable.replace_cardshoe().
Changes to primary libraries still need to be migrated to the standalone libraries.

6/4/17 8:42pm

Created CasinoTable.end_round() but it has not been tested yet.


6/6/17 2:40pm Pushed to origin

Fixed a problem with the loss printout not showing the Dealer score in CasinoTable.end_round() method.
Fixed a problem with insurance bets printing a result when the conditions for an insurance bet were not met.
Fixed a problem with the printout of the Dealer's scores in CasinoTable.dealer_turn() method.
Added the option to replace the CardShoe object deck to CasinoTable.end_round().
Moved a printout in CasinoTable.dealer_turn() to the end of CasinoTable.end_round().
Eliminated the 'redeal' option from CasinoTable.hit_or_stand() since it no longer eliminates players. Now, it returns 'none'  for both no players remaining and no playable hands remaining.
Updated the comment block for CasinoTable class with the new methods that have been tested.
The game is now playable using a simple code loop in jupyter notebook.
Updated class library code with the jupyter notebook versions.
Made the bank default 100,000 in CasinoTable.__init__() method. Also updated the comments for table_size.

6/8/17 6:00pm

Added CasinoTable.start_round() to the CasinoTable class. It has not been tested yet.

6/9/17 11:40pm Pushed to origin

Debugged CasinoTable.start_rount().
Migrated CasinoTable.start_round() to class library code.
Built and tested the first prototype of the actual game. it still needs to be exported to a separate file.
Fixed a typo in CasinoTable.rules() method, in the printed text.

6/9/17 11:50pm Pushed to origin

Added this change log to the files included with this program.

6/10/17 22:40 Pushed to origin

Renamed all class libraries in Project/lib to names importable by Python.

6/20/17 7:26am Pushed to origin

Created an __init__.py for the Class libraries for the time being. It ensures that the proper Classes are imported when lib is added.

9/9/17 04:15

Added card images which have not programmed yet.

9/9/17 05:45

Rearranged file structure to setup app, graphics, and lib directories.

9/9/17 05:55 Pushed to origin

Finished rearranging directories in preparation for conversion to pygame.
Note: Virtualized the environment so that I could install PyGame.

9/9/17 06:05 Pushed to origin

Forgot to update the change.log for the previous changes.

9/9/17 06:35 Pushed to origin

Finished exporting the card images to PNG files.

9/12/17 04:05 Pushed to origin

Concluded that I did not need the app organization for this application, as I was not going to use Flask with it. Removed app and moved all python files back main/lib and png graphics to main/graphics. Moved __init__.py to main as well, but it still needs work.

9/12/17 04:46 Pushed to origin

Created new branches bugmaintenance for bug fixes and pygame for the GUI creation.
Note: There are now 3 branches. So, checkouts and commits must be done with care, especially when sending them to GitHub

9/27/17 00:16 Several changes while debugging imports

Moved __init__.py to the lib directory and attempted a fix to the complaint regarding print_functions.
Removed the files generated from the Jupyter Notebooks. Fixing problems importing the libraries in lib.
Added Dealer.py to Player.py library to ensure inheritance when imported.
Revised __init__.py for libraries to indicate where Dealer is imported from.
Moved rules text from rules() method to a text file in etc.
Merged all Class libraries into a common file BlackjackClasses.py for now and updated __init__.py accordingly.

9/30/14 04:02

Fixed a bug in CasinoTable rules() method. Now it prints the rules from a file in etc.
Tested and verified that libraries are fully importable from an interactive prompt.
Added missing entries in master change log (this file).

Missed in last push (updated immediately after):
Converted card lists for suit and rank to tuples to make them constants.

10/11/17 06:04

General: Added import for os, os.path, and pygame. Using the import to eliminate need for pygame.locals on many calls.
CardShoe: Creating much better comments on the class and methods, including the ones with printout in iPython or IDLE.
CardShoe: __del__ returns its print string instead printing. This is a change from a boolean.
Player: Minor comment cleanup to get comments to less than 80 characters per line.
Player: Added clear comments on the definition of round, showing the full breakdown of each game round.
Player: __str__() returns  a dict data type with the full data on the player. 0 bets and non-existent hands are set to None. The layout of the playerData dict is:
The layout of the data is:
'name'            : player's name
'bank'            : player's bank
'hand'            : player's regular hand or None
'split hand'      : player's split hand or None
'soft score'      : soft score for player's hand or None
'hard score'      : hard score for player's hand or None
'soft score split hand' : soft score for split hand or None
'hard score split hand' : hard score for split hand or None
'regular bet'     : bet amount on regular hand or None
'split hand bet'  : bet amount on split hand or None
'insurance bet'   : bet amount on dealer blackjack or None

10/17/17 07:15

Player: __del__: returns a string indicating that a player has been removed from the game, instead of a boolean.
Player: print_split: now calls __str__ and returns the same result.
Player: more fixes to comments in almost all methods to make them clearer.
Player: add_card_to_hand: Improved the readability of the code.

10/24/17 23:10 Pushed to origin

Player: Updated the main comment block to reflect previous changes made to the methods in this class. Cleaned up comments for other methods. Reduced all comments to under 80 characters in length for readability.
Player: Removed all print statements from update_bet, update_split_bet, and update_ins. Rendering for messages associated with the return codes from these methods needs to be handled in other classes. Also cleaned up the comments in these methods.
Player: double_down method takes a bet amount (integer) and split (boolean). Based on split (boolean), it calls either update_bet or update_split_bet with  whatever 'bet_amt' contains,  0 as min and self.bet as max arguments. It returns the string returned by the bet update methods.

11/15/17 16:55 Pushed to origin

Player: More cleanup of the main comment block.
Player: __str__: Fixed a major error mixing the hands up in the dict object creation.
Player: values constant: Made the dict initialization easier to read.
Player: split_check: Made the code easier to read.
Dealer: Made sure the comment block  fits within an 80 character limit. Updated comments on in this block on __init__, __str__, and dealer_print.
Dealer: __init__: Default bank is 100,000 now.
Dealer: __str__: Updated the comments to reflect that is no longer prints data and returns a dict object  (like the player version).
Dealer: dealer_print: Now calls __str__ method to create dealerData dict object, changes the 'dealer turn' to True and returns dealerData to the calling function or method.
Dealer: add_card_to_hand: Made the code and comments easier to read.
Dealer: end_round: cleaned up the comments
Dealer: dealer_lost: Cleaned up comments and removed print statements.
Dealer: dealer_wins: Cleaned up comments.
Dealer: diagnostic_print: Cleaned up comments.

11/16/17 22:15

Added inflection module to convert integers to ordinals to be used for seating around the table. This helps convert players from a list to a dict object {'ordinal': playerObject}
Dealer: Dealer.name is no longer a constant.
Dealer: __init__:  A name is now accepted as the first argument and defaults to 'dealer'. A bank was already accepted with a default.
CasinoTable: Attributes are now blackjack_multiplier (unchanged), table_size (unchanged), deck (unchanged), tableDealer (new Dealer only object), players (new player dict object using seat ordinals to match playerObjects), and tableSeats (a dict object matching ordinals and seat numbers).
CasinoTable: __init__: Initializes all the objects with new defaults for playerNames, blackjack_multiplier, name, and bank.

11/19/17 20:40 Pushed to origin/pygame.

CasinoTable: Cleaned up the class comment block for __init__(), __str__(),  diagnostic_print(), and rules() methods.
CasinoTable: attributes: Added dealerLosses to track dealer's losses during a round
CasinoTable: __str__: returns the CasinoTable object. Cleaned up its comment block.
CasinoTable: diagnostic_print: Cleaned up its comment block.
CasinoTable: rules: returns the rules text or an error message if the rules file is not found.
Casino (game): Added Constants: Colors, FPS, game window specs.
Casino (game): main(): added global constants TABLEIMAGE, CARDIMAGES (maps card tuples to card images). Initialized pygame and the DISPLAYSURF and game caption.

11/22/17 02:10

Casino (game): Added an extra brown color (PERU). Added GNU fonts for BASICFONT, SCOREFONT, and DATAFONT pygame font.  The fonts default to freesansbolf if not found. Added BGCOLOR and TEXTCOLOR. Created Surface and Rect objects for a five player table. This is a preparation for building the table image in the program.

11/26/17 04:00 Pushed to origin/pygame

Casino (game): Added import of collections to get OrderedDict objects.
Casino (game): Converted CARDIMAGES into a nested ordered dict object that generates pygame.Surface and Rect objects for card images.
Casino (game): Added cardImagesDiagnosticPrint as a diagnostic routine to printout the card images.
Casino (game): Added BLANKCARD dict (image import, surface, and rect for a blank card image). Also added an Rect.inflate() call to ensure all card images were CARDWIDTH x CARDHEIGHT in size.
Casino (game): Determined the constants: CARDWIDTH, CARDHEIGHT, CARDSPACING, LINESPACING, BLANKCARD (dict object)
Casino (game): Better comments on the pygame constants.
Casino (game): Added data printing routines diagnosticPrint (placeholders for player printouts) and printTableDealer. These routines need to be tested next.
Dealer: Clarified comments regarding __str__ output.
Added Blank.png (a blankcard dictionary)
